# Input file for risugen defining AArch64 SVE2 instructions
.mode arm.aarch64

# Integer Multiply (Unpredicated)
## integer multiply vectors (unpredicated)
MUL         A64_V    00000100 size:2 1 zm:5 0110 00 zn:5 zd:5
SMULH       A64_V    00000100 size:2 1 zm:5 0110 10 zn:5 zd:5
UMULH       A64_V    00000100 size:2 1 zm:5 0110 11 zn:5 zd:5
PMUL        A64_V    00000100 00 1 zm:5 0110 01 zn:5 zd:5
## signed saturating doubling multiply high (unpredicated)
SQDMULH     A64_V    00000100 size:2 1 zm:5 01110 0 zn:5 zd:5
SQRDMULH    A64_V    00000100 size:2 1 zm:5 01110 1 zn:5 zd:5

# Integer Predicated
## integer pairwise add and accumulate long
SADALP      A64_V    01000100 size:2 00010 0 101 pg:3 zn:5 zda:5 \
!constraints { $size != 0; }
UADALP      A64_V    01000100 size:2 00010 1 101 pg:3 zn:5 zda:5 \
!constraints { $size != 0; }
## integer unary (predicated)
URECPE      A64_V    01000100 size:2 00 0 0 00 101 pg:3 zn:5 zda:5 \
!constraints { $size == 2; }
URSQRTE     A64_V    01000100 size:2 00 0 0 01 101 pg:3 zn:5 zda:5 \
!constraints { $size == 2; }
SQABS       A64_V    01000100 size:2 00 1 0 00 101 pg:3 zn:5 zda:5
SQNEG       A64_V    01000100 size:2 00 1 0 01 101 pg:3 zn:5 zda:5
## saturating/rounding bitwise shift left (predicated)
SRSHL       A64_V    01000100 size:2 00 0010 100 pg:3 zm:5 zdn:5
URSHL       A64_V    01000100 size:2 00 0011 100 pg:3 zm:5 zdn:5
SRSHLR      A64_V    01000100 size:2 00 0110 100 pg:3 zm:5 zdn:5
URSHLR      A64_V    01000100 size:2 00 0111 100 pg:3 zm:5 zdn:5
SQSHL_vec   A64_V    01000100 size:2 00 1000 100 pg:3 zm:5 zdn:5
UQSHL_vec   A64_V    01000100 size:2 00 1001 100 pg:3 zm:5 zdn:5
SQRSHL      A64_V    01000100 size:2 00 1010 100 pg:3 zm:5 zdn:5
UQRSHL      A64_V    01000100 size:2 00 1011 100 pg:3 zm:5 zdn:5
SQSHLR      A64_V    01000100 size:2 00 1100 100 pg:3 zm:5 zdn:5
UQSHLR      A64_V    01000100 size:2 00 1101 100 pg:3 zm:5 zdn:5
SQRSHLR     A64_V    01000100 size:2 00 1110 100 pg:3 zm:5 zdn:5
UQRSHLR     A64_V    01000100 size:2 00 1111 100 pg:3 zm:5 zdn:5
## integer halving add/subtract (predicated)
SHADD       A64_V    01000100 size:2 010 000 100 pg:3 zm:5 zdn:5
UHADD       A64_V    01000100 size:2 010 001 100 pg:3 zm:5 zdn:5
SHSUB       A64_V    01000100 size:2 010 010 100 pg:3 zm:5 zdn:5
UHSUB       A64_V    01000100 size:2 010 011 100 pg:3 zm:5 zdn:5
SRHADD      A64_V    01000100 size:2 010 100 100 pg:3 zm:5 zdn:5
URHADD      A64_V    01000100 size:2 010 101 100 pg:3 zm:5 zdn:5
SHSUBR      A64_V    01000100 size:2 010 110 100 pg:3 zm:5 zdn:5
UHSUBR      A64_V    01000100 size:2 010 111 100 pg:3 zm:5 zdn:5
## integer pairwise arithmetic
ADDP        A64_V    01000100 size:2 010 001 101 pg:3 zm:5 zdn:5
SMAXP       A64_V    01000100 size:2 010 100 101 pg:3 zm:5 zdn:5
UMAXP       A64_V    01000100 size:2 010 101 101 pg:3 zm:5 zdn:5
SMINP       A64_V    01000100 size:2 010 110 101 pg:3 zm:5 zdn:5
UMINP       A64_V    01000100 size:2 010 111 101 pg:3 zm:5 zdn:5
## saturating add/subtract
SQADD       A64_V    01000100 size:2 011 000 100 pg:3 zm:5 zdn:5
UQADD       A64_V    01000100 size:2 011 001 100 pg:3 zm:5 zdn:5
SQSUB       A64_V    01000100 size:2 011 010 100 pg:3 zm:5 zdn:5
UQSUB       A64_V    01000100 size:2 011 011 100 pg:3 zm:5 zdn:5
SUQADD      A64_V    01000100 size:2 011 100 100 pg:3 zm:5 zdn:5
USQADD      A64_V    01000100 size:2 011 101 100 pg:3 zm:5 zdn:5
SQSUBR      A64_V    01000100 size:2 011 110 100 pg:3 zm:5 zdn:5
UQSUBR      A64_V    01000100 size:2 011 111 100 pg:3 zm:5 zdn:5

# Widening Integer Arithmetic
## integer add/subtract long
SADDLB      A64_V    01000101 size:2 0 zm:5 00 0000 zn:5 zd:5 \
!constraints { $size != 0; }
SADDLT      A64_V    01000101 size:2 0 zm:5 00 0001 zn:5 zd:5 \
!constraints { $size != 0; }
UADDLB      A64_V    01000101 size:2 0 zm:5 00 0010 zn:5 zd:5 \
!constraints { $size != 0; }
UADDLT      A64_V    01000101 size:2 0 zm:5 00 0011 zn:5 zd:5 \
!constraints { $size != 0; }
SSUBLB      A64_V    01000101 size:2 0 zm:5 00 0100 zn:5 zd:5 \
!constraints { $size != 0; }
SSUBLT      A64_V    01000101 size:2 0 zm:5 00 0101 zn:5 zd:5 \
!constraints { $size != 0; }
USUBLB      A64_V    01000101 size:2 0 zm:5 00 0110 zn:5 zd:5 \
!constraints { $size != 0; }
USUBLT      A64_V    01000101 size:2 0 zm:5 00 0111 zn:5 zd:5 \
!constraints { $size != 0; }
SABDLB      A64_V    01000101 size:2 0 zm:5 00 1100 zn:5 zd:5 \
!constraints { $size != 0; }
SABDLT      A64_V    01000101 size:2 0 zm:5 00 1101 zn:5 zd:5 \
!constraints { $size != 0; }
UABDLB      A64_V    01000101 size:2 0 zm:5 00 1110 zn:5 zd:5 \
!constraints { $size != 0; }
UABDLT      A64_V    01000101 size:2 0 zm:5 00 1111 zn:5 zd:5 \
!constraints { $size != 0; }
## integer add/subtract wide
SADDWB      A64_V    01000101 size:2 0 zm:5 010 000 zn:5 zd:5 \
!constraints { $size != 0; }
SADDWT      A64_V    01000101 size:2 0 zm:5 010 001 zn:5 zd:5 \
!constraints { $size != 0; }
UADDWB      A64_V    01000101 size:2 0 zm:5 010 010 zn:5 zd:5 \
!constraints { $size != 0; }
UADDWT      A64_V    01000101 size:2 0 zm:5 010 011 zn:5 zd:5 \
!constraints { $size != 0; }
SSUBWB      A64_V    01000101 size:2 0 zm:5 010 100 zn:5 zd:5 \
!constraints { $size != 0; }
SSUBWT      A64_V    01000101 size:2 0 zm:5 010 101 zn:5 zd:5 \
!constraints { $size != 0; }
USUBWB      A64_V    01000101 size:2 0 zm:5 010 110 zn:5 zd:5 \
!constraints { $size != 0; }
USUBWT      A64_V    01000101 size:2 0 zm:5 010 111 zn:5 zd:5 \
!constraints { $size != 0; }
## integer multiply long
SQDMULLB    A64_V    01000101 size:2 0 zm:5 011 000 zn:5 zd:5 \
!constraints { $size != 0; }
SQDMULLT    A64_V    01000101 size:2 0 zm:5 011 001 zn:5 zd:5 \
!constraints { $size != 0; }
PMULLB      A64_V    01000101 size:2 0 zm:5 011 010 zn:5 zd:5 \
!constraints { $size != 0; }
PMULLT      A64_V    01000101 size:2 0 zm:5 011 011 zn:5 zd:5 \
!constraints { $size != 0; }
SMULLB      A64_V    01000101 size:2 0 zm:5 011 100 zn:5 zd:5 \
!constraints { $size != 0; }
SMULLT      A64_V    01000101 size:2 0 zm:5 011 101 zn:5 zd:5 \
!constraints { $size != 0; }
UMULLB      A64_V    01000101 size:2 0 zm:5 011 110 zn:5 zd:5 \
!constraints { $size != 0; }
UMULLT      A64_V    01000101 size:2 0 zm:5 011 111 zn:5 zd:5 \
!constraints { $size != 0; }

# Misc
## bitwise shift left long
SSHLLB      A64_V    010001010 tszh:1 0 tszl:2 imm3:3 1010 00 zn:5 zd:5 \
!constraints { !($tszh == 0 && $tszl == 0); }
SSHLLT      A64_V    010001010 tszh:1 0 tszl:2 imm3:3 1010 01 zn:5 zd:5 \
!constraints { !($tszh == 0 && $tszl == 0); }
USHLLB      A64_V    010001010 tszh:1 0 tszl:2 imm3:3 1010 10 zn:5 zd:5 \
!constraints { !($tszh == 0 && $tszl == 0); }
USHLLT      A64_V    010001010 tszh:1 0 tszl:2 imm3:3 1010 11 zn:5 zd:5 \
!constraints { !($tszh == 0 && $tszl == 0); }
## integer add/subtract interleaved long
SADDLBT     A64_V    01000101 size:2 0 zm:5 1000 00 zn:5 zd:5 \
!constraints { $size != 0; }
SSUBLBT     A64_V    01000101 size:2 0 zm:5 1000 10 zn:5 zd:5 \
!constraints { $size != 0; }
SSUBLTB     A64_V    01000101 size:2 0 zm:5 1000 11 zn:5 zd:5 \
!constraints { $size != 0; }
## bitwise exclusive-or interleaved
EORBT       A64_V    01000101 size:2 0 zm:5 10010 0 zn:5 zd:5
EORTB       A64_V    01000101 size:2 0 zm:5 10010 1 zn:5 zd:5
## bitwise permute
BEXT        A64_V    01000101 size:2 0 zm:5 1011 00 zn:5 zd:5
BDEP        A64_V    01000101 size:2 0 zm:5 1011 01 zn:5 zd:5
BGRP        A64_V    01000101 size:2 0 zm:5 1011 10 zn:5 zd:5

# Floating Point Pairwise
FADDP       A64_V    01100100 size:2 010 000 100 pg:3 zm:5 zdn:5 \
!constraints { $size != 0; }
FMAXNMP     A64_V    01100100 size:2 010 100 100 pg:3 zm:5 zdn:5 \
!constraints { $size != 0; }
FMINNMP     A64_V    01100100 size:2 010 101 100 pg:3 zm:5 zdn:5 \
!constraints { $size != 0; }
FMAXP       A64_V    01100100 size:2 010 110 100 pg:3 zm:5 zdn:5 \
!constraints { $size != 0; }
FMINP       A64_V    01100100 size:2 010 111 100 pg:3 zm:5 zdn:5 \
!constraints { $size != 0; }
