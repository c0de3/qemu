#!/bin/bash
#
# Test case for write zeroes with unmap
#
# Copyright (C) 2017 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# creator
owner=eblake@redhat.com

seq="$(basename $0)"
echo "QA output created by $seq"

here="$PWD"
status=1	# failure is the default!

_cleanup()
{
	_cleanup_test_img
}
trap "_cleanup; exit \$status" 0 1 2 3 15

# get standard environment, filters and checks
. ./common.rc
. ./common.filter

_supported_fmt qcow2
_supported_proto file
_supported_os Linux

echo
echo '=== Testing write zeroes with unmap ==='
echo

TEST_IMG="$TEST_IMG.base" _make_test_img 16M
_make_test_img -b "$TEST_IMG.base"

# Aligned writes should not allocate clusters, if unmap is requested
# and there is no backing file.
$QEMU_IO -c "write -z -u 1M 1M" "$TEST_IMG.base" | _filter_qemu_io

# Unmap can even clear previously-allocated clusters.
$QEMU_IO -c "write 3M 1M" "$TEST_IMG.base" | _filter_qemu_io
$QEMU_IO -c "write -z -u 3M 1M" "$TEST_IMG.base" | _filter_qemu_io

# Up to now, the entire image should still be unallocated.
$QEMU_IMG map --output=json "$TEST_IMG" | _filter_qemu_img_map

# But not requesting unmap must result in allocation (whether a cluster
# allocation in compat=0.10 or a flag allocation in compat=1.1).
$QEMU_IO -c "write -z 5M 1M" "$TEST_IMG.base" | _filter_qemu_io
$QEMU_IO -c "alloc 5M 1M" "$TEST_IMG.base" | _filter_qemu_io

# Presence of a backing file overrides permission to unmap.  Again,
# compat=0.10 images allocate, while compat=1.1 images set zero flag.
$QEMU_IO -c "write -z -u 7M 1M" "$TEST_IMG" | _filter_qemu_io
$QEMU_IO -c "alloc 7M 1M" "$TEST_IMG" | _filter_qemu_io

# Final check that images are still sane.
TEST_IMG="$TEST_IMG.base" _check_test_img
_check_test_img

# success, all done
echo '*** done'
status=0
