#!/usr/bin/env bash
#
# Test big discard in qcow2 shrink
#
# Copyright (c) 2019 Virtuozzo International GmbH. All rights reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# creator
owner=vsementsov@virtuozzo.com

seq=`basename $0`
echo "QA output created by $seq"

status=1	# failure is the default!

_cleanup()
{
    _cleanup_test_img
}
trap "_cleanup; exit \$status" 0 1 2 3 15

# get standard environment, filters and checks
. ./common.rc
. ./common.filter

# Requires backing files and .bdrv_change_backing_file support
_supported_fmt qcow2
_supported_proto file
_supported_os Linux

# This test checks bug in qcow2_process_discards, fixed by previous commit.
# The problem was that bdrv_pdiscard was called with uint64_t bytes parameter
# which was cropped to int.
# To reproduce bug we need to overflow int by one sequential discard, so we
# need size > 2G, bigger cluster size (as with default 64k we may have maximum
# of 512M sequential data, corresponding to one L1 entry, and we need to write
# at offset 0 at last, to prevent bdrv_co_truncate(bs->file) in
# qcow2_co_truncate to stole the whole effect of failed discard.

size=2300M
IMGOPTS="cluster_size=1M"

_make_test_img $size
$QEMU_IO -c 'write 100M 2000M' -c 'write 2100M 200M' \
    -c 'write 0 100M' "$TEST_IMG" | _filter_qemu_io

$QEMU_IMG info "$TEST_IMG" | _filter_testdir

$QEMU_IMG resize --shrink "$TEST_IMG" 50M

$QEMU_IMG info "$TEST_IMG" | _filter_testdir

# success, all done
echo "*** done"
rm -f $seq.full
status=0
