#!/usr/bin/env python
#
# Test nbd client reconnect
#
# Copyright (c) 2019 Virtuozzo International GmbH
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import os
import sys
import io
import subprocess
import iotests
from iotests import file_path, log


def start_server_NBD(nbd_sock, conf_file):
    srv = subprocess.Popen(["nbd-fault-injector.py", "--classic-negotiation",
                           nbd_sock, conf_file], stdout=subprocess.PIPE,
                           stderr=subprocess.STDOUT, universal_newlines=True)
    line = srv.stdout.readline()
    if "Listening on " in line:
        log('NBD server: started')
    else:
        log('NBD server: {}'.format(line.rstrip()))

    return srv


def check_server_NBD(srv):
    exitcode = srv.wait(timeout=10)

    if exitcode < 0:
        sys.stderr.write('NBD server: ERROR %i\n' % (-exitcode))
        log(srv.communicate()[0])
    else:
        line = srv.stdout.readline()
        log('NBD server: ' + line.rstrip())

    os.remove(nbd_sock)
    os.remove(conf_file)


def make_conf_file(conf_file, event):
    if os.path.exists(conf_file):
        os.remove(conf_file)

    with open(conf_file, "w+") as conff:
        conff.write("[inject-error]\nevent={}\nwhen=after".format(event))


disk, nbd_sock = file_path('disk', 'nbd-sock')
nbd_uri = 'nbd+unix:///?socket=' + nbd_sock
if os.path.exists(nbd_sock):
    os.remove(nbd_sock)

conf_file = os.path.join(iotests.test_dir, "nbd-fault-injector.conf")
make_conf_file(conf_file, "data")
srv = start_server_NBD(nbd_sock, conf_file)

log('NBD client: QEMU-IO write')
args = iotests.qemu_io_args + ['-f', 'raw', '-c', 'write -P 0x7 0 3M', nbd_uri]
clt = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

check_server_NBD(srv)

make_conf_file(conf_file, "reply")
srv = start_server_NBD(nbd_sock, conf_file)

exitcode = clt.wait(timeout=10)
if exitcode < 0:
    sys.stderr.write('qemu-io received signal %i: %s\n' %
                     (-exitcode, ' '.join(args)))

for line in io.TextIOWrapper(clt.stdout, encoding="utf-8"):
    if "3 MiB" not in line:
        log('NBD client: ' + line.rstrip())

check_server_NBD(srv)
