#!/usr/bin/env python
#
# Tests for qmp command nbd-server-remove.
#
# Copyright (c) 2017 Virtuozzo International GmbH
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import os
import sys
import iotests
import time
from iotests import qemu_img, qemu_io, filter_qemu_io, QemuIoInteractive

nbd_port = '10900'
nbd_uri = 'nbd+tcp://localhost:' + nbd_port + '/exp'
disk = os.path.join(iotests.test_dir, 'disk')

class TestNbdServerRemove(iotests.QMPTestCase):
    def setUp(self):
        qemu_img('create', '-f', iotests.imgfmt, disk, '1M')

        self.vm = iotests.VM().add_drive(disk)
        self.vm.launch()

        address = {
            'type': 'inet',
            'data': {
                'host': 'localhost',
                'port': nbd_port
            }
        }

        result = self.vm.qmp('nbd-server-start', addr=address)
        self.assert_qmp(result, 'return', {})
        result = self.vm.qmp('nbd-server-add', device='drive0', name='exp')
        self.assert_qmp(result, 'return', {})

    def tearDown(self):
        self.vm.shutdown()
        os.remove(disk)

    def remove_export(self, name, force=None):
        if force is None:
            result = self.vm.qmp('nbd-server-remove', name=name)
        else:
            result = self.vm.qmp('nbd-server-remove', name=name, force=force)
        self.assert_qmp(result, 'return', {})

    def assertExportNotFound(self, name):
        result = self.vm.qmp('nbd-server-remove', name=name)
        self.assert_qmp(result, 'error/desc', "Export 'exp' is not found")

    def assertReadOk(self, qemu_io_output):
        self.assertEqual(filter_qemu_io(qemu_io_output).strip(),
                'read 512/512 bytes at offset 0\n' +
                '512 bytes, X ops; XX:XX:XX.X (XXX YYY/sec and XXX ops/sec)')

    def assertReadFailed(self, qemu_io_output):
        self.assertEqual(filter_qemu_io(qemu_io_output).strip(),
                         'read failed: Input/output error')

    def assertConnectFailed(self, qemu_io_output):
        self.assertEqual(filter_qemu_io(qemu_io_output).strip(),
                         "can't open device nbd+tcp://localhost:10900/exp: " +
                         "Requested export not available\nserver reported: " +
                         "export 'exp' not present")

    def do_test_connect_after_remove(self, force=None):
        args = ('-r', '-f', 'raw', '-c', 'read 0 512', nbd_uri)
        self.assertReadOk(qemu_io(*args))
        self.remove_export('exp', force)
        self.assertExportNotFound('exp')
        self.assertConnectFailed(qemu_io(*args))

    def test_connect_after_remove_default(self):
        self.do_test_connect_after_remove()

    def test_connect_after_remove_safe(self):
        self.do_test_connect_after_remove(False)

    def test_connect_after_remove_force(self):
        self.do_test_connect_after_remove(True)

    def do_test_remove_during_connect(self, force=None):
        qio = QemuIoInteractive('-r', '-f', 'raw', nbd_uri)
        self.assertReadOk(qio.cmd('read 0 512'))
        self.remove_export('exp', force)
        if force:
            self.assertReadFailed(qio.cmd('read 0 512'))
            self.assertExportNotFound('exp')
        else:
            self.assertReadOk(qio.cmd('read 0 512'))
        qio.close()
        self.assertExportNotFound('exp')

    def test_remove_during_connect_default(self):
        self.do_test_remove_during_connect()

    def test_remove_during_connect_safe(self):
        self.do_test_remove_during_connect(False)

    def test_remove_during_connect_force(self):
        self.do_test_remove_during_connect(True)

    def test_remove_during_connect_safe_force(self):
        qio = QemuIoInteractive('-r', '-f', 'raw', nbd_uri)
        self.assertReadOk(qio.cmd('read 0 512'))
        self.remove_export('exp', False)
        self.assertReadOk(qio.cmd('read 0 512'))
        self.remove_export('exp', True)
        self.assertExportNotFound('exp')
        self.assertReadFailed(qio.cmd('read 0 512'))
        qio.close()


if __name__ == '__main__':
    iotests.main()
