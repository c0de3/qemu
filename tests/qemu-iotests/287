#!/usr/bin/env bash
#
# Test case for an image using zstd compression
#
# Copyright (c) 2020 Virtuozzo International GmbH
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# creator
owner=dplotnikov@virtuozzo.com

seq="$(basename $0)"
echo "QA output created by $seq"

status=1	# failure is the default!

_cleanup()
{
	_cleanup_test_img
}
trap "_cleanup; exit \$status" 0 1 2 3 15

# standard environment
. ./common.rc
. ./common.filter

# This tests qocw2-specific low-level functionality
_supported_fmt qcow2
_supported_proto file
_supported_os Linux

# Check if we can run this test.
IMGOPTS='compression_type=zstd'

_make_test_img 64M | grep "Invalid parameter 'zstd'" 2>&1 1>/dev/null

ZSTD_SUPPORTED=$?

if (($ZSTD_SUPPORTED==0)); then
    _notrun "ZSTD is disabled"
fi

# Test: when compression is zlib the incompatible bit is unset
echo
echo "=== Testing compression type incompatible bit setting for zlib ==="
echo

IMGOPTS='compression_type=zlib' _make_test_img 64M
$PYTHON qcow2.py "$TEST_IMG" dump-header | grep incompatible_features

# Test: when compression differs from zlib the incompatible bit is set
echo
echo "=== Testing compression type incompatible bit setting for zstd ==="
echo

IMGOPTS='compression_type=zstd' _make_test_img 64M
$PYTHON qcow2.py "$TEST_IMG" dump-header | grep incompatible_features

# Test: an image can't be openned if compression type is zlib and
#       incompatible feature compression type is set
echo
echo "=== Testing zlib with incompatible bit set  ==="
echo

IMGOPTS='compression_type=zlib' _make_test_img 64M
$PYTHON qcow2.py "$TEST_IMG" set-feature-bit incompatible 3
# to make sure the bit was actually set
$PYTHON qcow2.py "$TEST_IMG" dump-header | grep incompatible_features
$QEMU_IMG info "$TEST_IMG" 2>1 1>/dev/null
if (($?==0)); then
    echo "Error: The image openned successfully. The image must not be openned"
fi

# Test: an image can't be openned if compression type is NOT zlib and
#       incompatible feature compression type is UNSET
echo
echo "=== Testing zstd with incompatible bit unset  ==="
echo

IMGOPTS='compression_type=zstd' _make_test_img 64M
$PYTHON qcow2.py "$TEST_IMG" set-header incompatible_features 0
# to make sure the bit was actually unset
$PYTHON qcow2.py "$TEST_IMG" dump-header | grep incompatible_features
$QEMU_IMG info "$TEST_IMG" 2>1 1>/dev/null
if (($?==0)); then
    echo "Error: The image openned successfully. The image must not be openned"
fi
# Test: check compression type values
echo
echo "=== Testing compression type values  ==="
echo
# zlib=0
IMGOPTS='compression_type=zlib' _make_test_img 64M
od -j104 -N1 -An -vtu1 "$TEST_IMG"

# zstd=1
IMGOPTS='compression_type=zstd' _make_test_img 64M
od -j104 -N1 -An -vtu1 "$TEST_IMG"

# Test: using zstd compression, write to and read from an image
echo
echo "=== Testing reading and writing with zstd ==="
echo

CLUSTER_SIZE=65536
IMGOPTS='compression_type=zstd' _make_test_img 64M
$QEMU_IO -c "write -c -P 0xAC 65536 64k " "$TEST_IMG" | _filter_qemu_io
$QEMU_IO -c "read -P 0xAC 65536 65536 " "$TEST_IMG" | _filter_qemu_io
$QEMU_IO -c "read -v 131070 8 " "$TEST_IMG" | _filter_qemu_io
$QEMU_IO -c "read -v 65534 8" "$TEST_IMG" | _filter_qemu_io

# success, all done
echo "*** done"
rm -f $seq.full
status=0
