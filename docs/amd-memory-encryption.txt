Secure Encrypted Virtalization (SEV) is a feature found on AMD processors.

SEV feature allows the memory contents of a virtual machine (VM) to be
transparently encrypted with a key unique to the guest VM. The memory
controller contains a high performance encryption engine which can be
programmed with multiple keys for used by different VMs in the system.
The programming and management of these keys is handled by the AMD Platform
Secure Processor (PSP) firmware which exposes commands for these tasks. The
SEV commands can be send via KVM_SEV_ISSUE_CMD ioctl.

SEV is capable of supporting both light-weight virtual containers as well as
conventional VM within an enterprise cloud environment. In either case,
there are two parties concerned in the deloplyment of SEV guest: the guest
owner and the platform owner. For example, in a cloud envrionment, the
platform owner would be cloud vendor and the guest owner would be the user
that wishes to run their workload in the cloud.

Guest owners wish to protect the confidentiality of the data running within
their guests. While they trust the platform owner to provide the infrastrcuture
to run their guest, they benefit from reducing their risk exposure to
vulnerablities within that infrastruture. The SEV feature encrypts the content
of the memory of the guest and provides additional assurance that it was
encrypted properly. The encryption of memory places an additional burden
on attackers within the operational envrionment who may have already obtained
some illicit access to the guest's memory through a vulnerability in the
hypervisor or other supporting enterprise softwares.

Platform owners wish to provide such protection to guest owners, but also must
manage the computing resources efficiently and effectively. Resource allocation
need to be fluid and their customers data must be safely backed up in case
of failure. The SEV feature has been developed to be sensitive to this
requirement; it integrates into the conventional guest life cycle surrounding
guest launching, migration, and snapshotting.

The following links provide additional detail:

AMD Memory Encryption whitepaper:
   http://amd-dev.wpengine.netdna-cdn.com/wordpress/media/2013/12/AMD_Memory_Encryptio \
n_Whitepaper_v7-Public.pdf

Secure Encrypted Virutualization Key Management:
http://support.amd.com/TechDocs/55766_SEV-KM API_Spec.pdf

KVM Forum slides:
http://www.linux-kvm.org/images/7/74/02x08A-Thomas_Lendacky-AMDs_Virtualizatoin_Memory_Encryption_Technology.pdf

AMD64 Architecture Programmer's Manual:
   http://support.amd.com/TechDocs/24593.pdf
   SME is section 7.10
   SEV is section 15.34

1. API description
-----------------

SEV provides the following command via KVM_SEV_ISSUE_CMD ioctl to launch,
migrate and snapshot a SEV-enabled guest.

1.0 LAUNCH_START (KVM_SEV_LAUNCH_START)

The command is used to prepare a guest for the transition into SEV-enabled
mode.

Parameters: struct kvm_sev_launch_start
Returns: 0 on success; -1 on error.

/* for LAUNCH_START */
struct kvm_sev_launch_start {
    /* If KS is set; share key with guest reference by this handle */
    u32 handle;

    /* Bit 0 (KS) key sharing is enabled */
    u32 flags;

    /* Guest launch policy (see 1.5 for details)
    u32 policy;

    /* The Qx and Qy parameter of the owner's ECDH public key */
    u8 dh_pub_qx[32], dh_pub_qy[32];

    /* A nonce generated by the guest owner */
    u8 nonce[16];
}

The firmware creates a new launch context and generate a new VM Encryption Key
(VEK) - a 128-bit AES-128 key used to encrypt the memory of the guest. The key
is loaded into memory controller by the firmware.

1.1 LAUNCH_UPDATE (KVM_SEV_LAUNCH_UPDATE)

The command is used to encrypt the guest memory region specified using the VEK
loaded during LAUNCH_START.

Parameters: struct kvm_sev_launch_update
Returns: 0 on success; -1 on error

/* for LAUNCH_UPDATE */
struct kvm_sev_launch_update {
    /* host virtual address to encrypt */
    u64 address;

    /* length of memory region to encrypt */
    u32 len;
}

The firmware will perform the inline encryption of memory region and launch
measurement will be updated with the contents of the memor region.

1.2 LAUNCH_FINISH (KVM_SEV_LAUNCH_FINISH)

The command is used to finalize the SEV guest launch process and get the
measurement of encrypted contents.

Parameters: struct kvm_sev_launch_update
Returns: 0 on success; -1 on error

/* for LAUNCH_FINISH */
struct kvm_sev_launch_finish {
    /* contains measurement of memory encrypted via LAUNCH_UPDATE */
    u8 measurement[32];
}

After hypervisor has finished encrypting the guest's memory (via LAUNCH_UPDATE),
the hypervisor concludes the launch operation. The measurement value returned
from the LAUNCH_FINISH command can be handed to the guest owner to verify that
guest is launched successfully.

1.3 GUEST_STATUS (KVM_SEV_GUEST_STATUS)

The command returns the current SEV guest status.

Parameters: struct kvm_sev_guest_status
Returns: 0 on success; -1 on error

/* for GUEST_STATUS */
struct kvm_sev_guest_status {
    /* guest handle */
    u32 handle;

    /* guest policy */
    u32 policy;

    /* guest state (see state enum) */
    u8 state;
};

/* for SEV guest state */
GuestState {
    STATE_INVALID = 0,
    STATE_LAUNCHING,
    STATE_RECEIVING,
    STATE_SENDING,
    STATE_RUNNING,
};

1.4 DBG_DECRYPT (KVM_SEV_DBG_DECRYPT)

The command is used to decrypt a page of guest memory for debug.

Parameters: struct kvm_sev_dbg_decrypt
Returns: 0 on success; -1 on error

/* DGB_DECRYPT */
struct kvm_sev_dbg_decrypt {
    /*  virtual address of memory region to debug from */
    u64 src_address;

    /*  virtual address of memory region to write decrypted contents into */
    u64 dst_address;

    /* length of memory region */
    u32 length;
}

1.4 DBG_ENCRYPT (KVM_SEV_DBG_ENCRYPT)

The command is used to encrypt a page of guest memory for debug.

Parameters: struct kvm_sev_dbg_encrypt
Returns: 0 on success; -1 on error

/* DGB_ENCRYPT */
struct kvm_sev_dbg_encrypt {
    /*  virtual address of memory region to debug from */
    u64 src_address;

    /*  virtual address of memory region to write encrypted contents into */
    u64 dst_address;

    /* length of memory region */
    u32 length;
}

1.5 SEV Policy

Firmware maintain a guest policy provided by the guest owner. This policy is
enforced by the firmware and restricts what configuration and operational
command can be performed on the SEV guest by the hypervisor. For instance,
if debug is off then hypervisor will not able to decrypt guest memory using
DBG_DECRYPT commands.

The policy is 4-byte structure with the following field

Bit 0 (debug) - Debugging of the guest is disallowed when set
Bit 1 (ks) - Sharing keys with other guests is disallowed when set
Bit 2 (reserved) - must be set to 1
Bit 3 (nosend) - Sending the guest to another platform is disallowed when set
Bit 4 (domain) - The guest must not be transmitted to another platform that is not in the domain when set
Bit 5 (sev) - The guest must not be transmitted to another platform that is not SEV capable when set.
Bit 15:6 (reserved)
Bit 16:24 (fw_major) - The guest must not be transmitted to another platform that is not SEV capable when set.
Bit 25:31 (fw_minor) - The guest must not be transmitted to another platform that is not SEV capable when set.

2. QEMU command line
--------------------

SEV support can be enabled through 'memory-encryption' parameters defined in
security-policy object. 

The following objects can be used to provide SEV guest parameters.

2.0 sev-launch-info

The object can be used to provide various parameters required to launch an
unencrypted SEV guest. A unencrypted guest means that OS images (bios, kernel
and initrd) received from guest owner are unencrypted and SEV guest should
encrypt it using the LAUNCH command.

e.g to launch an unencrypted SEV guest

# $QEMU \
    -object sev-launch-info,id=launch0,flags.ks=off,dh-pub-qx=zzzz \
    -object sev-guest-info,id=sev0,launch=launch0 \
    -object security-policy,id=secure0,memory-encryption=sev0 \
    -machine ...,security-policy=secure0

2.1 sev-policy-info

The object can be used to provide the guest policy for sev-launch-info object

e.g to launch a unencrypted SEV guest which does not allow the guest to be
send to another platform (i.e disable migration)

# $QEMU \
    -object sev-policy-info,id=policy0,nosend=on \
    -object sev-launch-info,id=launch0,policy=policy0 \
    ....

2.2 sev-guest-info

The object provides the properties to set the SEV guest launch and send id to
use during SEV guest creation and migration.

e.g to use sev-launch-info object id during SEV guest creation

# $QEMU \
    -object sev-launch-info,id=launch0 \
    -object sev-guest-info,id=sev0,launch=launch0 \
    -object security-policy,id=secure0,memory-encryption=sev0 \
    ....

