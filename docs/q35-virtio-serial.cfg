# q35 - VirtIO guest (serial console)
# =========================================================
#
# You will probably need to tweak the lines marked as
# CHANGE ME before being able to use this configuration!
#
# Usage:
#
#   $ qemu-system-x86_64 \
#     -nographic -nodefaults \
#     -readconfig q35-virtio-serial.cfg
#
# The guest will have a selection of VirtIO devices
# tailored towards optimal performance with modern guests,
# and will be accessed through the serial console.
#
# ---------------------------------------------------------
#
# We need -nographic to prevent QEMU from creating an empty
# display window, which we're not interested in.
#
# Using -nodefaults is required to have full control over
# the virtual hardware: when it's specified, QEMU will
# create a bare machine with just the very essential
# chipset devices being present:
#
#   00:00.0 Host bridge
#   00:1f.0 ISA bridge / LPC
#   00:1f.2 SATA (AHCI) controller
#   00:1f.3 SMBus controller
#
# This configuration file adds a number of other useful
# devices, more specifically:
#
#   00.1c.* PCI bridge (PCI Express Root Ports)
#   01:00.0 SCSI storage controller
#   02:00.0 Ethernet controller
#   03:00.0 Communication controller (serial console)
#
# More information about these devices is available below.


# Machine options
# =========================================================
#
# We use the q35 machine type and enable KVM acceleration
# for better performance.
#
# Using less than 1 GiB of memory is probably not going to
# yield good performance in the guest, and might even lead
# to obscure boot issues in some cases.
#
# Unfortunately, there is no way to configure the CPU model
# in this file, so it will have to be provided on the
# command line.

[machine]
  type = "q35"
  accel = "kvm"

[memory]
  size = "1024"


# PCI bridge (PCI Express Root Ports)
# =========================================================
#
# We create eight PCI Express Root Ports, and we plug them
# all into separate functions of the same slot. Some of
# them will be used by devices, the rest will remain
# available for hotplug.

[device "pci.1"]
  driver = "pcie-root-port"
  bus = "pcie.0"
  addr = "1c.0"
  port = "1"
  chassis = "1"
  multifunction = "on"

[device "pci.2"]
  driver = "pcie-root-port"
  bus = "pcie.0"
  addr = "1c.1"
  port = "2"
  chassis = "2"

[device "pci.3"]
  driver = "pcie-root-port"
  bus = "pcie.0"
  addr = "1c.2"
  port = "3"
  chassis = "3"

[device "pci.4"]
  driver = "pcie-root-port"
  bus = "pcie.0"
  addr = "1c.3"
  port = "4"
  chassis = "4"

[device "pci.5"]
  driver = "pcie-root-port"
  bus = "pcie.0"
  addr = "1c.4"
  port = "5"
  chassis = "5"

[device "pci.6"]
  driver = "pcie-root-port"
  bus = "pcie.0"
  addr = "1c.5"
  port = "6"
  chassis = "6"

[device "pci.7"]
  driver = "pcie-root-port"
  bus = "pcie.0"
  addr = "1c.6"
  port = "7"
  chassis = "7"

[device "pci.8"]
  driver = "pcie-root-port"
  bus = "pcie.0"
  addr = "1c.7"
  port = "8"
  chassis = "8"


# SCSI storage controller (and storage)
# =========================================================
#
# We use virtio-scsi here so that we can (hot)plug a large
# number of disks without running into issues; a SCSI disk,
# backed by a qcow2 disk image on the host's filesystem, is
# attached to it.

[device "scsi"]
  driver = "virtio-scsi-pci"
  bus = "pci.1"
  addr = "00.0"

[device "scsi-disk"]
  driver = "scsi-hd"
  bus = "scsi.0"
  drive = "disk"

[drive "disk"]
  file = "guest.qcow2"                          # CHANGE ME
  format = "qcow2"
  if = "none"


# Ethernet controller
# =========================================================
#
# We use virtio-net for improved performance over emulated
# hardware; on the host side, we take advantage of user
# networking so that the QEMU process doesn't require any
# additional privileges.

[netdev "hostnet"]
  type = "user"

[device "net"]
  driver = "virtio-net-pci"
  netdev = "hostnet"
  bus = "pci.2"
  addr = "00.0"


# Communication controller (serial console)
# =========================================================
#
# We use virtconsole along with virtio-serial, and connect
# it with the host's standard input / output channels. In
# this configuration, the guest will behave pretty much
# like any other Unix utility: that includes terminating
# as soon as Ctrl-C is pressed, so caution is advised.
#
# If you want to use the platform's native serial console
# instead, you should comment out this section and append
#
#   -serial stdio
#
# to the QEMU command line. Doing so might be needed to be
# able to access the GRUB menu or see the output from the
# boot process.

[chardev "hostconsole"]
  backend = "stdio"

[device "serial"]
  driver = "virtio-serial-pci"
  bus = "pci.3"
  addr = "00.0"

[device "console"]
  driver = "virtconsole"
  chardev = "hostconsole"
