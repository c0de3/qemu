#!/usr/bin/env python

import re

header = """/*
 * File is generated by scripts/coroutine-wrapper.py
 */

#include "qemu/osdep.h"
#include "block/block_int.h"
"""

template = """
/*
 * Wrappers for $name$
 */

typedef struct $name$__ArgumentsPack {
    $fields$
} $name$__ArgumentsPack;

static void $name$__entry(void *opaque)
{
    $name$__ArgumentsPack *pack = opaque;

    $call$;

    *pack->_in_progress = false;
    aio_wait_kick();
    g_free(opaque);
}

Coroutine *$name$__create_co($args_def$)
{
    $name$__ArgumentsPack *pack = g_new($name$__ArgumentsPack, 1);

    *pack = ($name$__ArgumentsPack) {
        $initializers$
    };

    *_in_progress = true;

    return qemu_coroutine_create($name$__entry, pack);
}
"""

# We want to use python string.format() formatter, which uses curly brackets
# as separators. But it's not comfortable with C. So, we used dollars instead,
# and now is the time to escape curly brackets and convert dollars.
template = template.replace('{', '{{').replace('}', '}}')
template = re.sub(r'\$(\w+)\$', r'{\1}', template)

func_decl_re = re.compile(r'^([^(]+) ([a-z][a-z0-9_]*)\((.*)\)$')
param_re = re.compile(r'(?P<def>.*[ *](?P<name>[a-z][a-z0-9_]*))')


def format_args(args, format, separator):
    return separator.join(format.format(**arg) for arg in args)


def make_wrapper(function_declaration):
    try:
        m = func_decl_re.match(function_declaration)
        ret_type = m.group(1).strip()
        name = m.group(2)
        raw_args = m.group(3).split(', ')
        args = [param_re.match(arg).groupdict() for arg in raw_args]
    except AttributeError:
        raise ValueError('Failed to parse function declaration')

    xargs = [{'def': 'bool *_in_progress', 'name': '_in_progress'}] + args

    has_ret = ret_type != 'void'
    if has_ret:
        xargs.insert(1, {'def': ret_type + ' * _ret', 'name': '_ret'})

    params = {
        'name': name,
        'args_def': format_args(xargs, '{def}', ', '),
        'fields': format_args(xargs, '{def};', '\n    '),
        'initializers': format_args(xargs, '.{name} = {name},', '\n        '),
        'call': '{}{}({})'.format('*pack->_ret = ' if has_ret else '',
                                  name,
                                  format_args(args, 'pack->{name}', ', '))
    }

    return template.format(**params)


if __name__ == '__main__':
    import sys

    print(header)
    try:
        for ind, line in enumerate(sys.stdin):
            print(make_wrapper(line))
    except ValueError as e:
        sys.exit(('ERROR: {} at line {}:\n{}').format(e, ind + 1, line))
