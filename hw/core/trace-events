# See docs/devel/tracing.txt for syntax documentation.
#
# This file is processed by the tracetool script during the build.
#
# To add a new trace event:
#
# 1. Choose a name for the trace event.  Declare its arguments and format
#    string.
#
# 2. Call the trace event from code using trace_##name, e.g. multiwrite_cb() ->
#    trace_multiwrite_cb().  The source file must #include "trace.h".
#
# Format of a trace event:
#
# [disable] <name>(<type1> <arg1>[, <type2> <arg2>] ...) "<format-string>"
#
# Example: g_malloc(size_t size) "size %zu"
#
# The "disable" keyword will build without the trace event.
#
# The <name> must be a valid as a C function name.
#
# Types should be standard C types.  Use void * for pointers because the trace
# system may not have the necessary headers included.
#
# The <format-string> should be a sprintf()-compatible format string.

# resettable.c
resettable_reset(void *obj, int cold) "obj=%p cold=%d"
resettable_phase_init(void *obj, const char *type, int cold, uint32_t count, int needed) "obj=%p(%s) cold=%d count=%" PRIu32 " needed=%d"
resettable_phase_init_end(void *obj) "obj=%p"
resettable_phase_hold(void *obj, const char *type) "obj=%p(%s)"
resettable_phase_hold_end(void *obj, int needed) "obj=%p needed=%d"
resettable_phase_exit(void *obj, const char *type) "obj=%p(%s)"
resettable_phase_exit_end(void *obj, uint32_t count) "obj=%p count=%" PRIu32
resettable_count_underflow(void *obj) "obj=%p"
